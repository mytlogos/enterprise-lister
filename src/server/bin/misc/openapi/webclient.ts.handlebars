/**
 * Allowed Methods for the API.
 */
const Methods: { post: string; get: string; put: string; delete: string } = {
    post: "POST",
    get: "GET",
    put: "PUT",
    delete: "DELETE",
};
{{#each schemata}}
interface {{@key}} {

}
{{/each}}

const api = {
    {{#each paths}}
    "{{toKey path}}": {
        {{#each methods}}
        {{method}}: {
            method: Methods.{{method}},
            path: "{{../path}}"
        },
        {{/each}}
    },
    {{/each}}
};

export const HttpClient = {
    _user: null,
    _init: false,

    get userPromise(): Promise<any> {
        return new Promise((resolve) => {
            if (this._init) {
                resolve(this._user);
                return;
            }
            const intervalId = setInterval(() => {
                if (this._init) {
                    clearInterval(intervalId);
                    resolve(this._user);
                }
            }, 500);
        });
    },

    set user(user: any) {
        this._user = user;
        this._init = true;
    },

    get loggedIn(): boolean {
        // @ts-ignore
        return this.user && Boolean(this.user.uuid);
    },
    {{#each paths}}
    {{#each methods}}

    {{name}}({{toParameter parameter}}): Promise<{{toReturnType returnType}}> {
        return this.queryServer(api{{objectAccess ../path}}.{{method}}{{toQueryParam parameter}});
    },
    {{/each}}
    {{/each}}

    async queryServer({ path, method }: { path: string; method?: string }, query?: any): Promise<any> {
        // if path includes user, it needs to be authenticated
        if (path.includes("user")) {
            const user = await this.userPromise;
            // @ts-ignore
            if (!user || !user.uuid) {
                throw Error("cannot send user message if no user is logged in");
            }
            if (!query) {
                query = {};
            }
            // @ts-ignore
            query.uuid = user.uuid;
            // @ts-ignore
            query.session = user.session;
        }
        const init = {
            method,
            headers: {
                "Content-Type": "application/json; charset=utf-8",
            },
        };
        // @ts-expect-error
        const url = new URL(`${window.location.origin}/${path}`);
        if (query) {
            if (method === Methods.get) {
                Object.keys(query).forEach((key) =>
                    url.searchParams.append(key, query[key]),
                );
            } else {
                // @ts-ignore
                init.body = JSON.stringify(query);
            }
        }
        // @ts-expect-error
        const response = await fetch(url.toString(), init);
        const result = await response.json();
        if (result.error) {
            return Promise.reject(result.error);
        }
        return result;
    },
};
