name: Node.js CI Build-Test-Release

on:
  pull_request:
    branches: [master]
  push:
    branches:
      - master
      - next

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["16.x"]
    env:
      dbHost: "localhost"
      dbPassword: "none"
      dbUser: enterprise
      dbPort: 3306
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: write
      packages: write
    steps:
      - run: sudo service mysql stop

      - uses: getong/mariadb-action@v1.1
        with:
          mariadb version: "10.6" # Optional, default value is "latest". The version of the MariaDB
          mysql database: "enterprise" # Optional, default value is "test". The specified database which will be create
          mysql root password: "${{ env.dbPassword }}" # Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: "${{ env.dbUser }}" # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: "${{ env.dbPassword }}" # Required if "mysql user" exists. The password for the "mysql user"

      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm install
      - run: npm run build --ws
      # runs npm test and comments coverage on pr
      - uses: mattallty/jest-github-action@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          coverage-comment: false

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        continue-on-error: true
        with:
          name: JEST Tests # Name of the check run which will be created
          path: reports/jest-*.xml # Path to test results
          reporter: jest-junit # Format of test results

      - uses: artiomtr/jest-coverage-report-action@v2.0-rc.6
        if: ${{ github.event_name == 'pull_request' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          threshold: 30
          test-script: npx jest --silent --ci --coverage --coverageReporters="text" --coverageReporters="text-summary" --testLocationInResults --json --outputFile="report.json" --forceExit
        continue-on-error: true

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        with:
          # You can specify specifying version range for the extra plugins if you prefer.
          extra_plugins: |
            @semantic-release/changelog@6.0.1
            @semantic-release/git@10.0.1
            @semantic-release/exec@6.0.3
            @google/semantic-release-replace-plugin@1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install arm64 emulator for multi-platform build
        run: docker run --privileged --rm tonistiigi/binfmt --install arm64

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          pull: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            PROJECT_VERSION=${{ steps.semantic.outputs.new_release_version }}
